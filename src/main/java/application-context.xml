<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	
	<!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations" value="classpath*:/dbconfig.properties"/>
	</bean> -->
	<!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" ignore-resource-not-found="true" location="classpath:/conf.properties,classpath:/dbconfig.properties" />

	<!-- 使用阿里巴巴druid连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">    
       <!-- 数据库基本信息配置 -->  
       <property name="url" value = "${url}" />    
       <property name = "username" value = "${username}" />    
       <property name = "password" value = "${password}" />    
       <property name = "driverClassName" value = "${driverClassName}" />    
       <property name = "filters" value = "${filters}" />    
        <!-- 最大并发连接数 -->  
       <property name = "maxActive" value = "${maxActive}" />  
       <!-- 初始化连接数量 -->  
       <property name = "initialSize" value = "${initialSize}" />  
       <!-- 配置获取连接等待超时的时间 -->  
       <property name = "maxWait" value = "${maxWait}" />  
       <!-- 最小空闲连接数 -->  
       <property name = "minIdle" value = "${minIdle}" />    
       <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
       <property name = "timeBetweenEvictionRunsMillis" value ="${timeBetweenEvictionRunsMillis}" />  
       <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
       <property name = "minEvictableIdleTimeMillis" value ="${minEvictableIdleTimeMillis}" />    
       <property name = "validationQuery" value = "${validationQuery}" />    
       <property name = "testWhileIdle" value = "${testWhileIdle}" />    
       <property name = "testOnBorrow" value = "${testOnBorrow}" />    
       <property name = "testOnReturn" value = "${testOnReturn}" />    
       <property name = "maxOpenPreparedStatements" value ="${maxOpenPreparedStatements}" />  
       <!-- 打开 removeAbandoned 功能 -->  
       <property name = "removeAbandoned" value = "${removeAbandoned}" />  
       <!-- 1800 秒，也就是 30 分钟 -->  
       <property name = "removeAbandonedTimeout" value ="${removeAbandonedTimeout}" />  
       <!-- 关闭 abanded 连接时输出错误日志 -->     
       <property name = "logAbandoned" value = "${logAbandoned}" />  
  </bean>  

	<!-- enable autowire -->
    <context:annotation-config />
    
	<!--MyBatis integration with Spring as define sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-configuration.xml"/>
		<property name="mapperLocations" value="classpath*:com/**/**/dao/*.xml" />
	</bean>
	<!-- mybatis自动注册 dao到spring容器 mapper bean -->
	<bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.**.dao" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<!-- transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
	<!-- 配置 Annotation 驱动，定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 配置 切面逻辑 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"></tx:method>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"></tx:method>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"></tx:method>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"></tx:method>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"></tx:method>
			<tx:method name="query*" read-only="true"></tx:method>
			<tx:method name="select*" read-only="true"></tx:method>
			<tx:method name="find*" read-only="true"></tx:method>
			<tx:method name="search*" read-only="true"></tx:method>
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置Service层事务，多层事务都是REQUIRED,不会出问题-->
	<aop:config>
		<aop:pointcut id="autoproxy" expression="(execution(* com.web.**.services.*.*(..)))and(execution(* com.framework.**.services.*.*(..)))"></aop:pointcut>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="autoproxy"></aop:advisor>
	</aop:config>
	
	<!-- 扫描业务层service实现类 -->
	<context:component-scan base-package="com.**.impl" />
	
	<bean id="springContextHolder" class="com.framework.spring.SpringContextHolder" />
	
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>res.biz.messages</value>
			</list>
		</property>
	</bean>
	
</beans> 